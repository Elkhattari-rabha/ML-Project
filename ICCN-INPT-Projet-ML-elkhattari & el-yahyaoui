from google.colab import drive
drive.mount('/content/drive')

from scipy.io import loadmat
data_path1='/content/drive/My Drive/notre base de données/'
print("Loading data training set")        
dataset =loadmat('/content/drive/My Drive/notre base de données/' + 'trainingset.mat')
X = dataset['trainset']
y = dataset['traintarget']

import numpy as np
from sklearn.model_selection import train_test_split
X_train1,X_test,y_train1,y_test=train_test_split(X,y,test_size=0.2)
X_train,X_val,y_train,y_val=train_test_split(X_train1,y_train1,test_size=0.1)


from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf

from tensorflow import keras


from tensorflow.keras import layers
#notre model est vide mtn qu'on va le remplir
model = tf.keras.Sequential()
#input_dim nbr de variable en entré 
model.add(layers.Dense(128,activation="relu"))
#par default l'entré 
model.add(layers.Dense(64,activation="relu"))
model.add(layers.Dense(4,activation="relu"))

#accurancy=nbr correct  des predictions sur le nbr total

model.compile(loss="binary_crossentropy",optimizer="sgd",metrics=["accuracy"])

#batc_size = le lot qui contient les element à traiter à la fois 
history=model.fit(X_train,y_train,validation_data=(X_val,y_val),epochs=60,batch_size=100)
#_,acc=model.evaluate(X,y


# The returned "history" object holds a record of the loss values and metric values during training
print('\nhistory dict:', history.history)

# Evaluate the model on the test data using `evaluate`
print('\n# Evaluate on test data')
results = model.evaluate(X_test, y_test, batch_size=128)
print('test loss, test acc:', results)
#prediction 
#model.predict(X_val)

#Tracer  la courbe   Accuracy du model pour training et testing 
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'],'r',linewidth=3.0, label='Training Accuracy')
plt.plot(history.history['val_accuracy'],'b',linewidth=3.0, label='Testing Accuracy')
plt.legend(fontsize=18)
plt.xlabel('Epochs ', fontsize=16)
plt.ylabel('Accuracy', fontsize=16)
plt.title('Accuracy Curves', fontsize=16)

# #Tracer  la courbe   de la fonction de perte du model pour training et testing 
plt.plot(history.history['loss'], 'g', linewidth=3.0, label='Training Loss')
plt.plot(history.history['val_loss'], 'y', linewidth=3.0, label='Testing Loss')
plt.legend(fontsize=18)
plt.xlabel('Epochs ', fontsize=16)
plt.ylabel('Loss', fontsize=16)
plt.title('Loss Curves', fontsize=16)
